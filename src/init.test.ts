import test from 'ava'
import { init } from './init'
import { route } from './store/route'
import { hasEthereum } from './store/has-ethereum'
import { filter } from 'rxjs/operators'
import { removeExtraString } from './lib/test/remove-extra-string'
import { contextByRoutes } from './lib/context-by-routes'
const { document } = window

const pushState = (cb?: (_: any, __: string, url: string) => void) => (
	_: any,
	__: string,
	url: string
): void => {
	if (cb) {
		cb(_, __, url)
	}
}

const ethereum = <T extends () => void>(
	func?: T
): {
	enable: () => Promise<void>
} => ({
	enable: async () => {
		if (func) {
			func()
		}
	}
})

test.afterEach(() => {
	hasEthereum.next(false)
})

test('Subscribe the `route` and rewrite history', t => {
	t.plan(1)
	const stub = {
		pushState: pushState((_: any, __: string, url: string): void => {
			if (url === '/test') {
				t.is(url, '/test')
			}
		})
	}

	init({ history: stub as any, ethereum: ethereum() as any })
	route.next('/test')
})

test('Subscribe `route` and re-writes <head>', t => {
	route.next('/')
	init({
		history: {
			pushState: pushState()
		} as any,
		ethereum: ethereum() as any
	})
	const el = document.head.querySelector('title') as HTMLTitleElement
	t.is(removeExtraString(el.innerHTML), contextByRoutes('/').documentTitle)
	route.next('/xxx')
	t.is(removeExtraString(el.innerHTML), contextByRoutes('/xxx').documentTitle)
})

test('When includes ethereum in the window, then emit true with `hasEthereum`', async t =>
	new Promise(resolve => {
		hasEthereum.pipe(filter(x => x)).subscribe(() => {
			resolve()
		})
		init({
			history: {
				pushState: pushState()
			} as any,
			ethereum: ethereum() as any
		})
	}).then(() => t.pass()))

// Specs in the future:
// test('Dynamic import Dev Kit from @dev-protocol/dev-kit-js, then emit Eth with `devKit`', async t =>
// 	new Promise(resolve => {
// 		devKit
// 			.pipe(filter(x => typeof x !== 'undefined'))
// 			.subscribe(() => resolve())
// 		init({
// 			history: {
// 				pushState: pushState()
// 			} as any,
// 			ethereum: ethereum() as any
// 		})
// 	}).then(() => t.pass()))
// test('Complete dynamic import of Dev Kit, when ethereum is included in the window, then emit function the generated by Dev Kit with `devKitContract`', async t =>
// 	new Promise(resolve => {
// 		devKit
// 			.pipe(filter(x => typeof x !== 'undefined'))
// 			.subscribe(() => resolve())
// 		init({
// 			history: {
// 				pushState: pushState()
// 			} as any,
// 			ethereum: ethereum() as any
// 		})
// 	})
// 		.then(
// 			async () =>
// 				new Promise(resolve => {
// 					devKitContract
// 						.pipe(filter(x => typeof x !== 'undefined'))
// 						.subscribe(() => resolve())
// 				})
// 		)
// 		.then(() => t.pass()))
